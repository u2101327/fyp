services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: leakguard-postgres
    environment:
      - POSTGRES_DB=leakguard
      - POSTGRES_USER=leakguard
      - POSTGRES_PASSWORD=leakguard123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - leakguard-network

  # Django Web Application
  web:
    build: .
    container_name: leakguard-web
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-here-change-this-in-production
      - DATABASE_URL=postgresql://leakguard:leakguard123@postgres:5432/leakguard
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin123
      - MINIO_SECRET_KEY=admin123456
      - OPENSEARCH_HOST=opensearch-node1:9200
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE=${TELEGRAM_PHONE}
    depends_on:
      - postgres
      - redis
      - minio
      - opensearch-node1
    networks:
      - leakguard-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker for Background Tasks
  celery:
    build: .
    container_name: leakguard-celery
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-here-change-this-in-production
      - DATABASE_URL=postgresql://leakguard:leakguard123@postgres:5432/leakguard
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin123
      - MINIO_SECRET_KEY=admin123456
      - OPENSEARCH_HOST=opensearch-node1:9200
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE=${TELEGRAM_PHONE}
    depends_on:
      - postgres
      - redis
    networks:
      - leakguard-network
    command: celery -A leakguard worker -l info

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build: .
    container_name: leakguard-celery-beat
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - SECRET_KEY=your-secret-key-here-change-this-in-production
      - DATABASE_URL=postgresql://leakguard:leakguard123@postgres:5432/leakguard
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin123
      - MINIO_SECRET_KEY=admin123456
      - OPENSEARCH_HOST=opensearch-node1:9200
    depends_on:
      - postgres
      - redis
    networks:
      - leakguard-network
    command: celery -A leakguard beat -l info

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    networks:
      - leakguard-network
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  minio:
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - leakguard-network
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=admin123
      - MINIO_ROOT_PASSWORD=admin123456
    command: server /data --console-address ":9001"

  opensearch-node1:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligibile to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - leakguard-network # All of the containers will join the same Docker bridge network

  opensearch-node2:
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node2 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligibile to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables Security plugin
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data # Creates volume called opensearch-data2 and mounts it to the container
    networks:
      - leakguard-network # All of the containers will join the same Docker bridge network
    depends_on:
      - opensearch-node1

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch-node1:9200","http://opensearch-node2:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true" # disables security dashboards plugin in OpenSearch Dashboards
    networks:
      - leakguard-network
    depends_on:
      - opensearch-node1
      - opensearch-node2

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  opensearch-data1:
    driver: local
  opensearch-data2:
    driver: local

networks:
  leakguard-network:
    driver: bridge 